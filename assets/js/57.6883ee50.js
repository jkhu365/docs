(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{665:function(t,r,_){"use strict";_.r(r);var e=_(17),v=Object(e.a)({},(function(){var t=this,r=t.$createElement,_=t._self._c||r;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"standard-c-library-interface"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#standard-c-library-interface"}},[t._v("#")]),t._v(" Standard C Library Interface")]),t._v(" "),_("p",[t._v("You can find the corresponding prototype for the above function in the standard C library, just copy the function name to the function pointer.")]),t._v(" "),_("h3",{attrs:{id:"rt-port-heap-malloc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-heap-malloc"}},[t._v("#")]),t._v(" rt_port_heap_malloc")]),t._v(" "),_("p",[t._v("Same function as malloc.")]),t._v(" "),_("h3",{attrs:{id:"rt-port-heap-free"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-heap-free"}},[t._v("#")]),t._v(" rt_port_heap_free")]),t._v(" "),_("p",[t._v("Same function as free.")]),t._v(" "),_("h3",{attrs:{id:"rt-port-sprintf"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-sprintf"}},[t._v("#")]),t._v(" rt_port_sprintf")]),t._v(" "),_("p",[t._v("Same function as sprintf.")]),t._v(" "),_("h3",{attrs:{id:"rt-port-snprintf"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-snprintf"}},[t._v("#")]),t._v(" rt_port_snprintf")]),t._v(" "),_("p",[t._v("Same function as snprintf.")]),t._v(" "),_("h3",{attrs:{id:"rt-port-sscanf"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-sscanf"}},[t._v("#")]),t._v(" rt_port_sscanf")]),t._v(" "),_("p",[t._v("Same function as sscanf.")]),t._v(" "),_("h2",{attrs:{id:"interfaces-of-basic-functions"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#interfaces-of-basic-functions"}},[t._v("#")]),t._v(" Interfaces of Basic Functions")]),t._v(" "),_("h3",{attrs:{id:"rt-port-log-print-array"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-log-print-array"}},[t._v("#")]),t._v(" rt_port_log_print_array")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("void rt_port_log_print_array(const char *tag, const char *array, int len)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("LOG interface, used for printing an array of length len")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("Tag: description of the tag to be printed"),_("br"),t._v("\nArray: array to be printed"),_("br"),t._v("\nLen: number of the items to be printed\n")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("No output\n")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR\n")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h3",{attrs:{id:"rt-port-log-print"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-log-print"}},[t._v("#")]),t._v(" rt_port_log_print")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("void rt_port_log_print(char* log_level, char* file_name, int line_no, const char* msg, ...)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("LOG printing interface")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("log_level: LOG level"),_("br"),t._v("\nFile_name: file name"),_("br"),t._v("\nLine_no: line number"),_("br"),t._v("\nmsg: LOG info\n")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("No output\n")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR\n")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h2",{attrs:{id:"modem-interfaces"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#modem-interfaces"}},[t._v("#")]),t._v(" Modem Interfaces")]),t._v(" "),_("h3",{attrs:{id:"rt-port-modem-get-imei"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-modem-get-imei"}},[t._v("#")]),t._v(" rt_port_modem_get_imei")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("int rt_port_modem_get_imei(char* imei, unsigned int* len)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Get module IMEI")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("No output\n")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("IMEI: IMEI of the module"),_("br"),t._v("\nLen: length of the returned IMEI\n")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR\n")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("Size of the IMEI buffer shall not be less than 15 bytes.")])])]),t._v(" "),_("h3",{attrs:{id:"rt-port-modem-usim-transimit-apdu"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-modem-usim-transimit-apdu"}},[t._v("#")]),t._v(" rt_port_modem_usim_transimit_apdu")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("int rt_port_modem_usim_transimit_apdu(const unsigned char* capdu, unsigned short capdu_len, unsigned char* rapdu, unsigned short* rapdu_len)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Send APDU command to the eSIM card")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("capdu: buf of the sent command"),_("br"),t._v("\ncapdu_len: length of the sent command"),_("br"),t._v("\nExample (sending AT):"),_("br"),t._v("\ncapduï¼š0070800100     capu_len:10  "),_("br"),t._v('   \nCorresponding AT+CSIM command: AT+CSIM=10,"0070800100"\n'),_("br"),t._v('AT+CSIM=10,"0070800100"\n')])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("rapdu: buf of received command\n"),_("br"),t._v("\nrapdu_len: length of received command\n"),_("br"),t._v("\nExample (sending AT):\n"),_("br"),t._v('\nIf returned AT command is: +CSIM: 4,"9000"\n'),_("br"),t._v("\nrapdu: 9000     rapdu_len: 4\n")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR\n")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h2",{attrs:{id:"thread-and-synchronization-interfaces"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#thread-and-synchronization-interfaces"}},[t._v("#")]),t._v(" Thread and Synchronization Interfaces")]),t._v(" "),_("p",[t._v("Type: typedef viod* rt_mutex_t;")]),t._v(" "),_("h3",{attrs:{id:"rt-task-sleep"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-task-sleep"}},[t._v("#")]),t._v(" rt_task_sleep")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("void rt_task_sleep(unsigned int time_sleep_ms)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Task sleep or cyclic waiting function")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("time_sleep_ms: sleep or waiting time (in ms)")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("No output\n")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR\n")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h3",{attrs:{id:"rt-port-mutex-create"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-mutex-create"}},[t._v("#")]),t._v(" rt_port_mutex_create")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("int rt_port_mutex_create(rt_mutex_t *mutex)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Create a mutex")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR\n")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h3",{attrs:{id:"rt-port-mutex-lock"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-mutex-lock"}},[t._v("#")]),t._v(" rt_port_mutex_lock")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("int rt_port_mutex_lock(rt_mutex_t mutex)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Mutex locking")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR\n")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h3",{attrs:{id:"rt-port-mutex-unlock"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-mutex-unlock"}},[t._v("#")]),t._v(" rt_port_mutex_unlock")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("int rt_port_mutex_unlock(rt_mutex_t mutex)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Mutex unlocking")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR\n")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h2",{attrs:{id:"http-communication-interface"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-communication-interface"}},[t._v("#")]),t._v(" HTTP Communication Interface")]),t._v(" "),_("p",[t._v("Type: typedef void* rt_http_ctx\nAt least tls1.2 shall be supported.")]),t._v(" "),_("h3",{attrs:{id:"rt-port-http-client-create"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-http-client-create"}},[t._v("#")]),t._v(" rt_port_http_client_create")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("int rt_port_http_client_create(rt_http_ctx* http_client)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Create and initialize HTTP client")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("rt_http_ctx* http_client: the pointer to the HTTP client to be created")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("No output")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR\n")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h3",{attrs:{id:"rt-port-http-client-destroy"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-http-client-destroy"}},[t._v("#")]),t._v(" rt_port_http_client_destroy")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("int rt_port_http_client_destroy(rt_http_ctx http_client)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Destroy a specified HTTP client")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("http_client: HTTP client to be destroyed")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("No output")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR\n")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h3",{attrs:{id:"rt-port-http-post"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-http-post"}},[t._v("#")]),t._v(" rt_port_http_post")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("\n        int rt_port_http_post(rt_http_ctx http_client, const char* http_host, unsigned int port, const char* http_api, const char* private_headers[], unsigned int private_header_cnt, const unsigned char* post_content, unsigned int post_len, unsigned int* http_rsp_addr, unsigned int* rsp_len, int* res_code, char* is_store_flash,char is_tls)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("HTTP client post request")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[_("pre",[_("code",[t._v("http_client: HTTP client that initiated the request\nhttp_host: requested address\nport: requested port number\nhttp_api: api address\nprivate_headers: login access info (pointer array)\nprivate_header_cnt: number of login access info\npost_content: requested content (in JSON string)\npost_len: byte length of the requested content\nis_tls: Is it encrypted by TLS?\nExample:\nhttp_host: quark-staging.redtea.io\nport: 443\nhttp_api: /gsma/rsp2/es9plus/initiateAuthentication\nprivate_header: NULL\nis_tlsï¼š1\nURL of HTTPS address of the request: \n"),_("a",{attrs:{herf:"https://quark-staging.redtea.io:443/gsma/rsp2/es9plus/initiateAuthentication"}},[t._v("https://quark-staging.redtea.io:443/gsma/rsp2/es9plus/initiateAuthentication")]),t._v("\n443 is the default HTTPS port.")])])])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[_("pre",[_("code",[t._v("http_rsp_addr: flash address of the info responded by the"),_("br"),t._v(" server (if is_store_flash != 0)\nrsp_len: byte length of the info responded\nres_code: code responded\nis_store_flash: 0, which means that the response is stored in RAM,"),_("br"),t._v(" the RAM address is obtained through 6.4 rt_port_get_buffer; !=0,"),_("br"),t._v(' means the response is stored in flash.\nExample of response:\nGenerally, the response is a JSON string, such as:\n{\n    "header":\n    {\n        "functionExecutionStatus":\n            {\n                "status":"Failed","statusCodeData":     \n                {\n                    "subjectCode":"0.0.0",\n                    "reasonCode":"0.0",\n                    "message":"Unknown error"\n                }\n            }\n        }\n    }\nres_code: HTTP status code responded, if the request succeeded, res_code=200\n')])])])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR"),_("br")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h2",{attrs:{id:"others"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#others"}},[t._v("#")]),t._v(" Others")]),t._v(" "),_("h3",{attrs:{id:"rt-port-read-flash"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-read-flash"}},[t._v("#")]),t._v(" rt_port_read_flash")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("int rt_port_read_flash(unsigned char* buf, unsigned int read_addr, unsigned int len)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Read FLASH data")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("buf: RAM buffer"),_("br"),t._v("\nread_addr: FLASH address"),_("br"),t._v("\nlen: read length "),_("br")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("buf: data of len bytes length read")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("Success: RT_RES_SUCESS"),_("br"),t._v("\nFailure: RT_RES_ERROR"),_("br")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h3",{attrs:{id:"rt-port-watch-dog"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-watch-dog"}},[t._v("#")]),t._v(" rt_port_watch_dog")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("void rt_port_watch_dog(void)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Watchdog")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h3",{attrs:{id:"rt-port-reset-esim"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-reset-esim"}},[t._v("#")]),t._v(" rt_port_reset_esim")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("void rt_port_reset_esim(void)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Reset eSIM")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])]),t._v(" "),_("h3",{attrs:{id:"rt-port-get-buffer"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rt-port-get-buffer"}},[t._v("#")]),t._v(" rt_port_get_buffer")]),t._v(" "),_("table",[_("tr",[_("td",[t._v("Prototype")]),t._v(" "),_("td",{staticStyle:{width:"650px"}},[t._v("void* rt_port_get_buffer(unsigned int *size)")])]),t._v(" "),_("tr",[_("td",[t._v("Description")]),t._v(" "),_("td",[t._v("Get global buffer of the system ")])]),t._v(" "),_("tr",[_("td",[t._v("Input")]),t._v(" "),_("td",[t._v("/")])]),t._v(" "),_("tr",[_("td",[t._v("Output")]),t._v(" "),_("td",[t._v("size: byte size of the buffer")])]),t._v(" "),_("tr",[_("td",[t._v("Response")]),t._v(" "),_("td",[t._v("buffer pointer")])]),t._v(" "),_("tr",[_("td",[t._v("Remarks")]),t._v(" "),_("td",[t._v("/")])])])])}),[],!1,null,null,null);r.default=v.exports}}]);